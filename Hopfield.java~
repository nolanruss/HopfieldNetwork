import java.util.Random;
import java.util.LinkedList;


public class Hopfield{

/*
 * Programming Assignment 3
 * CSC 511, SP 2016
 * Nolan Thompson
 * Matt Levan
 */ 

static final int M = 9;
static final int N = M*M;
static final int MAX_EXAMPLES = 4;
static int[][] weights = new int[N][N];

/* Create all the example states, then store in LinkedList */
LinkedList examples = new LinkedList<int[]>();

int[] ex1 = {
    1,  1,  1,  1, -1,  1,  1,  1,  1,
    1,  1,  1,  1, -1,  1,  1,  1,  1,
    1,  1,  1,  1, -1,  1,  1,  1,  1,
    1,  1,  1,  1, -1,  1,  1,  1,  1,
   -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1,  1,  1,  1, -1,  1,  1,  1,  1,
    1,  1,  1,  1, -1,  1,  1,  1,  1,
    1,  1,  1,  1, -1,  1,  1,  1,  1,
    1,  1,  1,  1, -1,  1,  1,  1,  1
};

int[] ex2 = {
    -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1,  1,  1,  1,  1,  1,  1,  1, -1,
    -1,  1,  1,  1,  1,  1,  1,  1, -1,
    -1,  1,  1,  1,  1,  1,  1,  1, -1,
    -1,  1,  1,  1,  1,  1,  1,  1, -1,
    -1,  1,  1,  1,  1,  1,  1,  1, -1,
    -1,  1,  1,  1,  1,  1,  1,  1, -1,
    -1,  1,  1,  1,  1,  1,  1,  1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1
};

int[] ex3 = {
   -1,  1 , 1, 1, 1, 1, 1, 1, -1,
    1, -1, 1, 1, 1, 1, 1, -1, 1,
    1,  1, -1, 1, 1, 1, -1, 1, 1,
    1,  1, 1, -1, 1, -1, 1, 1, 1,
    1,  1, 1, 1, -1, 1, 1, 1, 1,
    1,  1, 1, -1, 1, -1, 1, 1, 1,
    1,  1, -1, 1, 1, 1, -1, 1, 1,
    1, -1, 1, 1, 1, 1, 1, -1, 1,
   -1,  1, 1, 1, 1, 1, 1, 1, -1
};

int[] ex4 = {
    1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1, -1, -1, -1, -1, -1,  1,  1,
    1,  1, -1,  1,  1,  1,  1, -1,  1,
    1,  1, -1,  1,  1,  1,  1, -1,  1,
    1,  1, -1,  1,  1,  1,  1, -1,  1,
    1,  1, -1, -1, -1, -1, -1, -1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1
};


public Hopfield(){
	examples.addFirst(ex1);
	examples.addFirst(ex2);
	examples.addFirst(ex3);
	examples.addFirst(ex4);
}

int[] inputs = new int[N];
int[] outputs = new int[N];

/* The hopfield sign function */
public static int SGN ( int x ){
    if (x >= 0) return 1;
    else return -1;
}


public void set_inputs_to_example ( int ex, double p ){
    
    Random rand = new Random();

	int[] tmp = (int[]) examples.get(ex);    

    for (int i = 0; i < N; i++){
        
        /* Grab the input cell */
        inputs[i] = tmp[i];
        
        /* Mutate the input of probability permits */
        if (rand.nextInt() < p) 
			inputs[i] *= -1;
    }
    
    return;
}


public void generate_weights_from_examples(){
    int e, r, c;
    
    /* First, clear the weights */
    for (r = 0; r < N; r++) {
        for (c = 0; c < N; c++){
            weights[r][c] = 0;
		}
    }
	 
    for (e = 0; e < MAX_EXAMPLES; e++){

		int[] tmp = (int[]) examples.get(e);

        for (r = 0; r < N; r++){
            for (c = 0; c < N; c++){
                
                /* Don't permit self-connections */
                if (r==c) continue;
                
                weights[r][c] += tmp[r] * tmp[c];
            }
        }
    }
    
    return;
}


public void compute_activations(){
    int r, c;
    int[][] temp = new int[N][N];
    
    for (r = 0; r < N; r++){
        for (c = 0; c < N; c++){
            if (r == c) continue;
            temp[r][c] += inputs[r] * weights[r][c];
        }   
    }
    
    for (c = 0; c < N; c++) {
        outputs[c] = 0;
        for (r = 0; c < N; r++){
            outputs[c] += temp[r][c];
        }
        outputs[c] = SGN(outputs[c]);
    }
    
    return;
}


void emit_result ( int[] vector ){
    int i;
    
    for (i = 0; i < N; i++){
        
        if ( (i % M) == 0) System.out.print("\n");
        
        if (vector[i] < 0) System.out.print("* ");
        else System.out.println(" ");
    }
    
    System.out.print("\n");
}


public static void main (String[] args){
    int e, i;
    double noise;
    
    generate_weights_from_examples();
    
    for (e = 0; e < MAX_EXAMPLES; e++){
        
        noise = 0.0;
        
        for (i = 0; i < 4; i++){
            
            System.out.print("\n--\nnoise prob " + noise + "\n");
            
            set_inputs_to_example( e, noise );
            emit_results( inputs );
            
            compute_activations();
            
            System.out.print("result " + e + "\n");
            emit_result(outputs);
            
            noise += 0.1;
            
        }
        
        System.out.print("\n---------------------------------\n\n");
        
    }
    
    return 0;
}
}
